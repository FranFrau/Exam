|-----------------------------------[Level 00]----------------------------------|
| Assignment name  : aff_a														|
| Expected files   : aff_a.c													|
| Allowed functions: write														|
|-------------------------------------------------------------------------------|
| 																				|
| Write a program that takes a string, and displays the first 'a' character it	|
| encounters in it, followed by a newline. If there are no 'a' characters in the|
| string, the program just writes a newline. If the number of parameters is not	|
| 1, the program displays 'a' followed by a newline.							|
| 																				|
| Example:																		|
| 																				|
| $> ./aff_a "abc" | cat -e														|
| a$																			|
| $> ./aff_a "dubO a POIL" | cat -e												|
| a$																			|
| $> ./aff_a "zz sent le poney" | cat -e										|
| $																				|
| $> ./aff_a | cat -e															|
| a$																			|
|-----------------------------------[Level 00]----------------------------------|

|-----------------------------------[Level 00]----------------------------------|
| 																				|
| Assignment name  : ft_print_numbers											|
| Expected files   : ft_print_numbers.c											|
| Allowed functions: write														|
|-------------------------------------------------------------------------------|
|																				|
| Write a function that displays all digits in ascending order.					|
| 																				|
| Your function must be declared as follows:									|
|																				|
| void	ft_print_numbers(void);													|
|-----------------------------------[Level 00]----------------------------------|

|-----------------------------------[Level 01]----------------------------------|
|																				|
| Assignment name  : rev_print													|
| Expected files   : rev_print.c												|
| Allowed functions: write														|
|-------------------------------------------------------------------------------|
|																				|
| Write a program that takes a string, and displays the string in reverse		|
| followed by a newline.														|
|																				|
| If the number of parameters is not 1, the program displays a newline.			|
|																				|
| Examples:																		|
|																				|
| $> ./rev_print "zaz" | cat -e													|
| zaz$																			|
| $> ./rev_print "dub0 a POIL" | cat -e											|
| LIOP a 0bud$																	|
| $> ./rev_print | cat -e														|
| $																				|
|-----------------------------------[Level 01]----------------------------------|

|-----------------------------------------[Level 01]----------------------------------------|
|																							|
| Assignment name  : fizzbuzz																|
| Expected files   : fizzbuzz.c																|
| Allowed functions: write																	|
|-------------------------------------------------------------------------------------------|
|																							|
| Write a program that prints the numbers from 1 to 100, each separated by a				|
| newline.																					|
|																							|
| If the number is a multiple of 3, it prints 'fizz' instead.								|
|																							|
| If the number is a multiple of 5, it prints 'buzz' instead.								|
|																							|
| If the number is both a multiple of 3 and a multiple of 5, it prints 'fizzbuzz' instead.	|
|																							|
| Example:																					|
|																							|
| $>./fizzbuzz																				|
| 1																							|
| 2																							|
| fizz																						|
| 4																							|
| buzz																						|
| fizz																						|
| 7																							|
| 8																							|
| fizz																						|
| buzz																						|
| 11																						|
| fizz																						|
| 13																						|
| 14																						|
| fizzbuzz																					|
| [...]																						|
| 97																						|
| 98																						|
| fizz																						|
| buzz																						|
| $>																						|
|-----------------------------------------[Level 01]----------------------------------------|

|------------------------------------[Level 01]-------------------------------------|
|																					|
| Assignment name  : rotone															|
| Expected files   : rotone.c														|
| Allowed functions: write															|
| --------------------------------------------------------------------------------	|
|																					|
| Write a program that takes a string and displays it, replacing each of its		|
| letters by the next one in alphabetical order.									|
|																					|
| 'z' becomes 'a' and 'Z' becomes 'A'. Case remains unaffected.						|
|																					|
| The output will be followed by a \n.												|
|																					|
| If the number of arguments is not 1, the program displays \n.						|
|																					|
| Example:																			|
|																					|
| $>./rotone "abc"																	|
| bcd																				|
| $>./rotone "Les stagiaires du staff ne sentent pas toujours tres bon." | cat -e	|
| Mft tubhjbjsft ev tubgg of tfoufou qbt upvkpvst usft cpo.$						|
| $>./rotone "AkjhZ zLKIJz , 23y " | cat -e											|
| BlkiA aMLJKa , 23z $																|
| $>./rotone | cat -e																|
| $																					|
| $>																				|
| $>./rotone "" | cat -e															|
| $																					|
| $>																				|
|------------------------------------[Level 01]-------------------------------------|

|-----------------------------------[Level 02]----------------------------------|
|																				|
| Assignment name  : ft_strcmp													|
| Expected files   : ft_strcmp.c												|
| Allowed functions:															|
|-------------------------------------------------------------------------------|
|																				|
| Reproduce the behavior of the function strcmp (man strcmp).					|
|																				|
| Your function must be declared as follows:									|
|																				|
| int    ft_strcmp(char *s1, char *s2);											|
|-----------------------------------[Level 02]----------------------------------|

|-----------------------------------[Level 02]----------------------------------|
|																				|
| Assignment name  : ft_strrev													|
| Expected files   : ft_strrev.c												|
| Allowed functions:															|
|-------------------------------------------------------------------------------|
|																				|
| Write a function that reverses (in-place) a string.							|
|																				|
| It must return its parameter.													|
|																				|
| Your function must be declared as follows:									|
|																				|
| char    *ft_strrev(char *str);												|
|-----------------------------------[Level 02]----------------------------------|

|------------------------------------[Level 02]-------------------------------------|
|																					|
| Assignment name  : last_word														|
| Expected files   : last_word.c													|
| Allowed functions: write															|
|-----------------------------------------------------------------------------------|
|																					|
| Write a program that takes a string and displays its last word followed by a \n.	|
|																					|
| A word is a section of string delimited by spaces/tabs or by the start/end of		|
| the string.																		|
|																					|
| If the number of parameters is not 1, or there are no words, display a newline.	|
|																					|
| Example:																			|
|																					|
| $> ./last_word "FOR PONY" | cat -e												|
| PONY$																				|
| $> ./last_word "this      ...     is sparta, then again, maybe    not" | cat -e	|
| not$																				|
| $> ./last_word "   " | cat -e														|
| $																					|
| $> ./last_word "a" "b" | cat -e													|
| $																					|
| $> ./last_word "  lorem,ipsum  " | cat -e											|
| lorem,ipsum$																		|
| $>																				|
|------------------------------------[Level 02]-------------------------------------|

| -----------------------------------[Level 02]-----------------------------------	|
| 																					|
| Assignment name  : ft_atoi														|
| Expected files   : ft_atoi.c														|
| Allowed functions: None															|
| --------------------------------------------------------------------------------	|
| 																					|
| Write a function that converts the string argument str to an integer (type int)	|
| and returns it.																	|
| 																					|
| It works much like the standard atoi(const char *str) function, see the man.		|
| 																					|
| Your function must be declared as follows:										|
| 																					|
| int	ft_atoi(const char *str);													|
| 																					|
| -----------------------------------[Level 02]-----------------------------------	|

|-----------------------------------[Level 03]--------------------------------------|
|																					|
| Assignment name  : ft_rrange														|
| Expected files   : ft_rrange.c													|
| Allowed functions: malloc															|
|-----------------------------------------------------------------------------------|
|																					|
| Write the following function:														|
|																					|
| int     *ft_rrange(int start, int end);											|
|																					|
| It must allocate (with malloc()) an array of integers, fill it with consecutive	|
| values that begin at end and end at start (Including start and end !), then		|
| return a pointer to the first value of the array.									|
|																					|
| Examples:																			|
|																					|
| - With (1, 3) you will return an array containing 3, 2 and 1						|
| - With (-1, 2) you will return an array containing 2, 1, 0 and -1.				|
| - With (0, 0) you will return an array containing 0.								|
| - With (0, -3) you will return an array containing -3, -2, -1 and 0.				|
|-----------------------------------[Level 03]--------------------------------------|

|----------------------------------[Level 04]---------------------------------------|
|																					|
| Assignment name  : ft_split														|
| Expected files   : ft_split.c														|
| Allowed functions: malloc															|
|-----------------------------------------------------------------------------------|
|																					|
| Write a function that takes a string, splits it into words, and returns them as	|
| a NULL-terminated array of strings.												|
|																					|
| A "word" is defined as a part of a string delimited either by spaces/tabs/new		|
| lines, or by the start/end of the string.											|
|																					|
| Your function must be declared as follows:										|
|																					|
| char    **ft_split(char *str);													|
|----------------------------------[Level 04]---------------------------------------|